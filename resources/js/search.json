[[{"l":"Overview","p":["Tholgar is a DeFi protocol that build products on top of other DeFi protocol enabling users to gain higher yield than alone.","We empower synergy with Paladin Vote stakeholders to build products that will benefit the whole ecosystem.","Our first product is an auto-compounder built on top of Warlord. It will let anyone join a vault and gain higher and more optimized yield in a non custodial manner."]}],[{"l":"Overview"},{"i":"what-is-warlord-","l":"What is Warlord ?","p":["Warlord is an index of governance tokens which gains yield and that will auto compound some rewards into WAR + optimize the overall yield with an auto voter on most rewarding vote incentives. You can read more about it here."]},{"i":"what-is-the-warlord-vault-","l":"What is the Warlord Vault ?","p":["It is a product built by Tholgar team. This is an auto-compounder built on top of Warlord. It will let anyone join a vault and gain higher and more optimized yield in a non custodial manner.","All vote incentives will be claimed every week and auto-compounded into the vault gaining even more yield.","It uses the ERC4626 standard to follow the industry standart developped by yearn to enable more composability with other protocols."]},{"l":"Addresses","p":["v2 (thWAR)","Vault: 0x2fc1E74BC8A6D15fE768c10C2EDe7D6d95ec27e9","Zap: 0x1Ec2b9a77A7226ACD457954820197F89B3E3a578","Swapper: 0xF2B3038C8bB9c4B225841496CF1D4Ca47b4c90D6","Migration (from v1 vault): 0x18708A93aD916fCafA4Ba365cdC723FcD3d8c65C","v1 (tWAR, legacy)","Vault: 0x188cA46Aa2c7ae10C14A931512B62991D5901453","Zap: 0x0598c652eEB0F95137Af02f32022005139453744","Swapper: 0x4247d145049B426d39f19F41555137D9cB154B99"]}],[{"i":"twar","l":"$tWAR"},{"i":"what-is-war-","l":"What is WAR ?","p":["WAR is an ERC-20 token that is always redeemable for its backing assets. As a governance index, WAR is composed of Convex (CVX) and Aura (AURA) which is vote-locked to generate yield. All rewards and yield are sent back to WAR stakers. At the moment, WAR accepts only these two assets but the system can be adapted to other vlTokens.","The only way to mint WAR is by depositing either CVX or AURA, or both. When minting, users will receive WAR directly. To then start earning with WAR, users must stake WAR to earn their rewards and vote incentive yield. Vote incentives are distributed in WETH and are managed by Paladin’s delegation address. BAL and CRV are earned as auraBAL and cvxCRV to farm more AURA & BAL and CVX & CRV while it's not claimed. Other rewards include PAL, FXS and cvxFXS. Also, any AURA or CVX earned is auto-compounded into more WAR. Users who don’t stake their WAR forfeit their yield to other stakers.","Users who wish to exit the Warlord system will need to redeem their WAR tokens for their backing. The redemption ratio will depend on the current ratio of locked assets within the system. Once redeemed, the WAR will be queued for the unlock date of each asset. CVX and AURA will unlock at separate dates depending on their availability. Once available, users will be able to claim their tokens. Note: assets in the redeem queue do not earn yield."]},{"i":"what-is-twar-","l":"What is tWAR ?","p":["tWAR is an ERC20 token that represents the shares of the underlying amount of $WAR held by the vault. It means that for example if a user hold 10 $tWAR and the total amount of $tWAR is 1000, the user owns 1% of the $WAR held in the vault.","It uses the ERC4626 standard to implement this feature and follow industry standard. This token will then be able to be used in other DeFi protocols.","This vault is an auto-compounder meaning that instead of earning yield directly through $WAR, it will claim this yield then recompound it every week for more $WAR."]},{"i":"how-does-the-auto-compounding-works-","l":"How does the auto compounding works ?","p":["We have implemented the auto-compounder in a way that it will claim all the rewards every week and then recompound them into the vault. It will optimize the yield in the long term by not claiming cvxCRV and auraBAL rewards to first farm more WAR and then have less gas fees. It will also arbitrage the current weight of CVX and AURA to mint more WAR.","The process is first we harvest rewards with the harvest function and swap them using an router such as Paraswap into feeToken. Then we compound rewards using the compound function and swap the feeToken back into CVX or AURA to then mint more WAR and stake it.","All of the code of the server that will make the calls is open source and can be found in the operator directory. We also aim in the future to use a decentralised way instead of a centralised server to make the calls."]},{"l":"Fees","p":["The only fee taken by the vault is 5% of the yield harvested only in WETH (excluding WAR directly harvested). This fee is used to cover gas fees and will decline as the Vault grows."]},{"l":"Security","p":["All of the funds held by the Vault are non custodial meaning that admins will never be able to access them.","At the current stage, the vaylt has not undergone a formal security audit. However, the contracts have undergone extensive internal testing & external reviews, giving confidence in the existing security measures implemented. We strongly advise users to conduct their own research and make informed decisions based on their individual risk tolerance."]}],[{"l":"Deposit","p":["Currently, two set of tokens can be deposited : WAR and AURA/CVX. The process is nearly the same for both sets."]},{"l":"Deposit WAR"},{"l":"Accessing WAR deposit","p":["The war deposit is the default option when the app is loaded. You can still retrieve it by selecting the deposit tab and selecting WAR token in the bottom-left dropdown."]},{"l":"Depositing"},{"l":"Enter amount","p":["Enter the desired amount of WAR you wish to deposit and click the \"Deposit\" button."]},{"l":"Approval","p":["A dialog will open by first asking you to approve the WAR spending (according to ERC-20 standards). You can select to approve only your deposit amount or approve the max spending to avoid this step on the following deposits."]},{"i":"deposit-1","l":"Deposit","p":["You will then be prompted to sign the transaction to deposit. This is the final step."]},{"l":"Verify","p":["The \"Circulating Supply\" and \"War Locked\" stats should be increased by your deposit amount. If it is not immediatly the case, try to refresh you page."]},{"i":"deposit-auracvx","l":"Deposit AURA/CVX"},{"i":"accessing-auracvx-deposit","l":"Accessing AURA/CVX deposit","p":["To access AURA/CVX deposit, you need to change the deposit token(s) by using the bottom-left dropdown in the deposit tab."]},{"i":"depositing-1","l":"Depositing"},{"i":"enter-amount-1","l":"Enter amount","p":["Enter the desired amount of AURA and/or CVX you wish to deposit and click the \"Deposit\" button."]},{"i":"approval-1","l":"Approval","p":["A dialog will open by first asking you to approve the AURA and CVX spendings (according to ERC-20 standards). You can select to approve only your deposit amount or approve the max spending to avoid those step on the following deposits."]},{"i":"deposit-2","l":"Deposit","p":["You will then be prompted to sign the transaction to deposit. This is the final step."]},{"i":"verify-1","l":"Verify","p":["The \"Circulating Supply\" and \"War Locked\" stats should be increased by your deposit amounts wheighted by the current ratios. If it is not immediatly the case, try to refresh you page."]}],[{"l":"Withdraw","p":["You can currently withdraw your tWAR into WAR tokens."]},{"l":"Fee","p":["A withdraw fee is taken to avoid front-running. Frontrunning occurs when a user deposit right before a compound and withdraw right after, profiting from the vault performance without participating to it. To counter this behavior, a 1.5% fee is taken from the withdraw amount. Note that this fee does not go to the protocol but is rather shared amongst all vault users."]},{"l":"Accessing WAR withdraw","p":["You can access the WAR withdraw by selecting the withdraw tab."]},{"l":"Withdrawing"},{"l":"Enter amount","p":["Enter the desired amount of tWAR you wish to withdraw and click the \"Withdraw\" button."]},{"i":"withdraw-1","l":"withdraw","p":["A dialog will open by first asking you to sign the withdraw transaction."]},{"l":"Verify","p":["The \"Circulating Supply\" and \"War Locked\" stats should be decreased by your withdraw amount. If it is not immediatly the case, try to refresh you page."]}],[{"l":"Migrate","p":["To facilitate migration from v1 vault (tWAR) to v2 (thWAR), a migration contract has been deployed and a section on the website has been added.","Note that this is a helper and is not mandatory to migrate.","What the migration contract does is withdrawing WARs from the v1 vault and instantly redeposit on the v2 vault. To perform those operations, the tWAR must be aproved to the migration contract."]}],[{"l":"Redeem","p":["To redeem in AURA/CVX, you will first have to withdraw your tWAR into WAR tokens ( see how).","Once you have WAR tokens in your wallet, you will need to go to Paladin's Warlord app to initiate the reddem process.","The instructions can be found here https://doc.paladin.vote/warlord/redeeming-war"]}],[{"l":"thWAR","p":["Technical documentation for all Warlord Vault v2 smart contracts."]}],[{"l":"Migration","p":["This is an contract that helps users migrate from v1 vault to v2 one. It simply withdraw from the first vault and redeposit immediatly on the upgraded version."]},{"l":"State Variables"},{"l":"oldVault","p":["Address of the old vault"]},{"l":"newVault","p":["Address of the new vault"]},{"l":"asset","p":["Address of the asset to be migrated"]},{"l":"Functions"},{"l":"constructor"},{"l":"migrate"}],[{"l":"Swapper","p":["This is an contract that will handle all of the swaps for the vault. So far it will use an router to swap any tokens and send them back to the sender. It is set as another contract to be able to change it in the future if the paradigm of router change drastically. It is meant to be used in a push / pull manner with the swap function."]},{"l":"State Variables"},{"l":"swapRouter","p":["Dex/aggregaor router to call to perform swaps"]},{"l":"tokenTransferAddress","p":["Address to allow to swap tokens"]},{"l":"vault","p":["Address of the ERC4626 vault"]},{"l":"Functions"},{"l":"onlyVault"},{"l":"constructor"},{"l":"setSwapRouter","p":["Set the dex/aggregator router to call to perform swaps","Parameters","Name","Type","Description","newSwapRouter","address","address of the router"]},{"l":"setTokenTransferAddress","p":["Set the token proxy address to allow to swap tokens","Parameters","Name","Type","Description","newTokenTransferAddress","address","address of the token proxy"]},{"l":"setVault","p":["Set the vault address","Parameters","Name","Type","Description","newVault","address","address of the vault"]},{"l":"recoverERC20","p":["Recover ERC2O tokens in the contract","Parameters","Name","Type","Description","token","address","Address of the ERC2O token","Returns","none","bool","bool: success"]},{"l":"swap","p":["Swap tokens using the router/aggregator","The calldatas should set the recipient of the tokens to the vault","Parameters","Name","Type","Description","tokens","address[]","array of tokens to swap","callDatas","bytes[]","array of bytes to call the router/aggregator"]},{"l":"_performRouterSwap","p":["Perform the swap using the router/aggregator","Parameters","Name","Type","Description","callData","bytes","bytes to call the router/aggregator"]},{"l":"Events"},{"l":"SwapRouterUpdated","p":["Event emitted when the swap router is updated"]},{"l":"TokenTransferAddressUpdated","p":["Event emitted when the token proxy is updated"]},{"l":"VaultUpdated","p":["Event emitted when the vault is updated"]}],[{"l":"Vault","p":["This is the main contract of the Warlord protocol. It allows user to deposit WAR that will then be staked in the Warlord staking contract. It also handles the harvest and compound logic of the vault. Some admins functions are here to handle fees and pause the contract if needed. The Vault itself can change staker but not the underlying asset."]},{"l":"State Variables"},{"l":"_asset","p":["Address of the definitive asset()"]},{"l":"_NAME","p":["Name of the vault"]},{"l":"_SYMBOL","p":["Symbol of the vault"]},{"l":"staker","p":["Address of the stkWAR token"]},{"l":"minter","p":["Address of the WAR minter contract"]},{"l":"swapper","p":["Address of the swapper contract"]},{"l":"Functions"},{"l":"constructor"},{"l":"setStaker","p":["update the staker contract to a new one","Parameters","Name","Type","Description","newStaker","address","the new staker contract"]},{"l":"setSwapper","p":["update the swapper contract to a new one","Parameters","Name","Type","Description","newSwapper","address","the new swapper contract"]},{"l":"setMinter","p":["update the minter contract to a new one","Parameters","Name","Type","Description","newMinter","address","the new minter contract"]},{"l":"recoverERC20","p":["Recover ERC2O tokens in the contract","Parameters","Name","Type","Description","token","address","Address of the ERC2O token","Returns","none","bool","bool: success"]},{"l":"pause","p":["Pause the contract"]},{"l":"unpause","p":["Unpause the contract"]},{"l":"name","p":["Returns the name of the token"]},{"l":"symbol","p":["Returns the symbol of the token"]},{"l":"previewRedeem","p":["previewRedeem returns the amount of assets that will be redeemed minus the withdrawal fees"]},{"l":"asset","p":["asset is the definitive asset of the vault (WAR)"]},{"l":"totalAssets","p":["totalAssets is the total number of stkWAR"]},{"l":"deposit"},{"l":"mint"},{"l":"withdraw"},{"l":"redeem"},{"l":"_afterDeposit","p":["stake assets after each deposit"]},{"l":"_beforeWithdraw","p":["unstake assets before each withdraw to have enough WAR to transfer"]},{"l":"harvest","p":["Harvest all rewards from staker","calldatas should swap from all reward tokens to feeToken","Parameters","Name","Type","Description","tokensToHarvest","address[]","tokens to harvest","tokensToSwap","tokens to swap to feeToken","callDatas","bytes[]","swapper routes to swap to feeToken"]},{"l":"compound","p":["Turn all rewards into more staked assets","Parameters","Name","Type","Description","tokensToSwap","address[]","tokens which includes the feeToken to swap to more assets","callDatas","bytes[]","swapper routes to swap to more assets","tokensToMint","tokens to mint more stkWAR"]},{"l":"Events"},{"l":"StakerUpdated","p":["Event emitted when a staker is updated"]},{"l":"MinterUpdated","p":["Event emitted when a minter is updated"]},{"l":"SwapperUpdated","p":["Event emitted when a swapper is updated"]},{"l":"Harvested","p":["Event emitted when reward have been harvested"]},{"l":"Compounded","p":["Event emitted when rewards are compounded into more stkWAR"]}],[{"l":"Zap","p":["This is an util contract to ease the deposit of aura/cvx or any ERC20 into the vault. It will first mint WAR with the amount of aura/cvx you want to deposit, then deposit it into the vault for tWAR."]},{"l":"State Variables"},{"l":"AURA","p":["Address of the AURA token"]},{"l":"CVX","p":["Address of the Convex token"]},{"l":"WETH","p":["Address of the WETH token"]},{"l":"WAR","p":["Address of the War token"]},{"l":"swapRouter","p":["Dex/aggregaor router to call to perform swaps"]},{"l":"tokenTransferAddress","p":["Address to allow to swap tokens"]},{"l":"warMinter","p":["Address of the WarMinter contract"]},{"l":"vault","p":["Address of the ERC4626 vault"]},{"l":"Functions"},{"l":"constructor"},{"l":"resetWarlordAllowances","p":["Resets the allowances for Warlord-related interactions."]},{"l":"removeWarlordAllowances","p":["Removes the allowances for Warlord-related interactions."]},{"l":"removeRouterAllowance"},{"l":"setWarMinter","p":["Set the WarMinter address","Parameters","Name","Type","Description","newWarMinter","address","address of the WarMinter"]},{"l":"setSwapRouter","p":["Set the dex/aggregator router to call to perform swaps","Parameters","Name","Type","Description","newSwapRouter","address","address of the router"]},{"l":"setTokenTransferAddress","p":["Set the token proxy address to allow to swap tokens","Parameters","Name","Type","Description","newTokenTransferAddress","address","address of the token proxy"]},{"l":"setVault","p":["Set the vault address","Parameters","Name","Type","Description","newVault","address","address of the vault"]},{"l":"_swap","p":["Perform the swap using the router/aggregator","Parameters","Name","Type","Description","tokens","address[]","array of tokens to swap","callDatas","bytes[]","bytes to call the router/aggregator"]},{"l":"_performRouterSwap","p":["Perform the swap using the router/aggregator","Parameters","Name","Type","Description","callData","bytes","bytes to call the router/aggregator"]},{"l":"_mintSingleToken","p":["Mint a single vlToken","Parameters","Name","Type","Description","receiver","address","Address to stake for","vlToken","Token to mint WAR","amount","uint256","Amount of token to mint"]},{"l":"_swapAndMintSingleToken","p":["Swap to a single vlToken and mint tWAR","Parameters","Name","Type","Description","receiver","address","Address to stake for","token","Token to swap","vlToken","Token to mint WAR","callDatas","bytes","bytes to call the router/aggregator"]},{"l":"_mintMultipleTokens","p":["Mint multiple vlTokens","Parameters","Name","Type","Description","receiver","address","Address to stake for","vlTokens","address[]","Tokens to mint WAR","amounts","uint256[]","Amounts to mint"]},{"l":"_swapAndMintMultipleTokens","p":["address","Address to stake for","address[]","bytes to call the router/aggregator","bytes[]","callDatas","Description","Name","Parameters","receiver","Swap to multiple vlTokens and mint tWAR","token","Token to swap","Tokens to mint WAR","Type","vlTokens"]},{"l":"zapEtherToSingleToken","p":["Zaps ether to a single vlToken","Parameters","Name","Type","Description","vlToken","address","Token to mint WAR","receiver","Address to stake for","callDatas","bytes","bytes to call the router/aggregator"]},{"l":"zapERC20ToSingleToken","p":["address","Address to stake for","amount","Amount of token to swap","bytes","bytes to call the router/aggregator","callDatas","Description","Name","Parameters","receiver","token","Token to mint WAR","Token to swap","Type","uint256","vlToken","Zaps an ERC20 token to a single vlToken"]},{"l":"zapEtherToMultipleTokens","p":["Zaps ether to multiple vlTokens","Parameters","Name","Type","Description","vlTokens","address[]","List of token addresses to deposit","receiver","address","Address to stake for","callDatas","bytes[]","bytes to call the router/aggregator"]},{"l":"zapERC20ToMultipleTokens","p":["address","Address to stake for","address[]","amount","Amount of token to swap","bytes to call the router/aggregator","bytes[]","callDatas","Description","List of token addresses to deposit","Name","Parameters","receiver","token","Token to swap","Type","uint256","vlTokens","Zaps an ERC20 token to multiple vlTokens"]},{"l":"zapVlToken","p":["Zaps a vlToken to tWAR","Parameters","Name","Type","Description","vlToken","address","Token to mint WAR","amount","uint256","Amount of token to swap","receiver","Address to stake for"]},{"l":"zapVlTokens","p":["Zaps multiple vlTokens to tWAR","Parameters","Name","Type","Description","vlTokens","address[]","List of token addresses to deposit","amounts","uint256[]","List of token amounts to deposit","receiver","address","Address to stake for"]},{"l":"Events"},{"l":"Zapped","p":["This event is emitted when a zap operation occurs.","Parameters","Name","Type","Description","mintedAmount","uint256","The amount of WAR tokens minted as a result.","receiver","address","The address of the recipient of the WAR tokens."]},{"i":"setwarminter-1","l":"SetWarMinter","p":["This event is emitted when the WarMinter address is changed.","Parameters","Name","Type","Description","newMinter","address","The new WarMinter address."]},{"l":"SetWarStaker","p":["This event is emitted when the WarStaker address is changed.","Parameters","Name","Type","Description","newStaker","address","The new WarStaker address."]},{"l":"SwapRouterUpdated","p":["Event emitted when the swap router is updated"]},{"l":"TokenTransferAddressUpdated","p":["Event emitted when the token proxy is updated"]},{"l":"VaultUpdated","p":["Event emitted when the vault is updated"]}],[{"l":"tWAR","p":["Technical documentation for all Warlord Vault v1 smart contracts."]}],[{"l":"Swapper","p":["This is an contract that will handle all of the swaps for the vault. So far it will use an router to swap any tokens and send them back to the sender. It is set as another contract to be able to change it in the future if the paradigm of router change drastically. It is meant to be used in a push / pull manner with the swap function."]},{"l":"State Variables"},{"l":"swapRouter","p":["Dex/aggregaor router to call to perform swaps"]},{"l":"tokenTransferAddress","p":["Address to allow to swap tokens"]},{"l":"vault","p":["Address of the ERC4626 vault"]},{"l":"Functions"},{"l":"onlyVault"},{"l":"constructor"},{"l":"setSwapRouter","p":["Set the dex/aggregator router to call to perform swaps","Parameters","Name","Type","Description","newSwapRouter","address","address of the router"]},{"l":"setTokenTransferAddress","p":["Set the token proxy address to allow to swap tokens","Parameters","Name","Type","Description","newTokenTransferAddress","address","address of the token proxy"]},{"l":"setVault","p":["Set the vault address","Parameters","Name","Type","Description","newVault","address","address of the vault"]},{"l":"recoverERC20","p":["Recover ERC2O tokens in the contract","Parameters","Name","Type","Description","token","address","Address of the ERC2O token","Returns","none","bool","bool: success"]},{"l":"swap","p":["Swap tokens using the router/aggregator","The calldatas should set the recipient of the tokens to the vault","Parameters","Name","Type","Description","tokens","address[]","array of tokens to swap","callDatas","bytes[]","array of bytes to call the router/aggregator"]},{"l":"_performRouterSwap","p":["Perform the swap using the router/aggregator","Parameters","Name","Type","Description","callData","bytes","bytes to call the router/aggregator"]},{"l":"Events"},{"l":"SwapRouterUpdated","p":["Event emitted when the swap router is updated"]},{"l":"TokenTransferAddressUpdated","p":["Event emitted when the token proxy is updated"]},{"l":"VaultUpdated","p":["Event emitted when the vault is updated"]}],[{"l":"Vault","p":["This is the main contract of the Warlord protocol. It allows user to deposit WAR that will then be staked in the Warlord staking contract. It also handles the harvest and compound logic of the vault. Some admions functions are here to handle fees and pause the contract if needed. The Vault itself can change staker but not the underlying asset."]},{"l":"State Variables"},{"l":"staker","p":["Address of the stkWAR token"]},{"l":"minter","p":["Address of the WAR minter contract"]},{"l":"swapper","p":["Address of the swapper contract"]},{"l":"MAX_BPS","p":["Max BPS value (100%)"]},{"l":"harvestFee","p":["fee to be applied when harvesting rewards"]},{"l":"feeRecipient","p":["address to receive the harvest fee"]},{"l":"feeToken","p":["token to be used to pay the harvest fee"]},{"l":"operator","p":["operator caller address to allow access only to web3 function"]},{"l":"Functions"},{"l":"constructor"},{"l":"setStaker","p":["update the staker contract to a new one","Parameters","Name","Type","Description","newStaker","address","the new staker contract"]},{"l":"setOperator"},{"l":"setSwapper","p":["update the swapper contract to a new one","Parameters","Name","Type","Description","newSwapper","address","the new swapper contract"]},{"l":"setMinter","p":["update the minter contract to a new one","Parameters","Name","Type","Description","newMinter","address","the new minter contract"]},{"l":"setHarvestFee"},{"l":"setFeeRecipient"},{"l":"setFeeToken"},{"l":"recoverERC20","p":["Recover ERC2O tokens in the contract","Parameters","Name","Type","Description","token","address","Address of the ERC2O token","Returns","none","bool","bool: success"]},{"l":"pause","p":["Pause the contract"]},{"l":"unpause","p":["Unpause the contract"]},{"l":"totalAssets","p":["totalAssets is the total number of stkWAR"]},{"l":"deposit"},{"l":"mint"},{"l":"withdraw"},{"l":"redeem"},{"l":"afterDeposit","p":["stake assets after each deposit"]},{"l":"beforeWithdraw","p":["unstake assets before each withdraw to have enough WAR to transfer"]},{"l":"harvest","p":["Harvest all rewards from staker","calldatas should swap from all reward tokens to feeToken","Parameters","Name","Type","Description","tokensToHarvest","address[]","tokens to harvest","tokensToSwap","tokens to swap to feeToken","callDatas","bytes[]","swapper routes to swap to feeToken"]},{"l":"compound","p":["Turn all rewards into more staked assets","Parameters","Name","Type","Description","tokensToSwap","address[]","tokens which includes the feeToken to swap to more assets","callDatas","bytes[]","swapper routes to swap to more assets","tokensToMint","tokens to mint more stkWAR"]},{"l":"Events"},{"l":"StakerUpdated","p":["Event emitted when a staker is updated"]},{"l":"MinterUpdated","p":["Event emitted when a minter is updated"]},{"l":"SwapperUpdated","p":["Event emitted when a swapper is updated"]},{"l":"Harvested","p":["Event emitted when reward have been harvested"]},{"l":"Compounded","p":["Event emitted when rewards are compounded into more stkWAR"]},{"l":"HarvestFeeUpdated","p":["Event emitted when harvestFee is updated"]},{"l":"FeeRecipientUpdated","p":["Event emitted when feeRecipient is updated"]},{"l":"FeeTokenUpdated","p":["Event emitted when feeToken is updated"]},{"l":"OperatorUpdated","p":["Event emitted when a output tokens and/or ratios are updated"]}],[{"l":"Zap","p":["This is an util contract to ease the deposit of aura/cvx into the vault. It will first mint WAR with the amount of aura/cvx you want to deposit, then deposit it into the vault for tWAR."]},{"l":"State Variables"},{"l":"asset","p":["Address of war token"]},{"l":"vault","p":["Address of the auto compounding war vault"]},{"l":"minter","p":["Address of the war minter"]},{"l":"Functions"},{"l":"constructor"},{"i":"zap-1","l":"zap","p":["address","Address of the token to deposit","Address to stake for","amount","Amount to deposit","Description","Name","none","Parameters","receiver","Returns","token","Type","uint256","uint256 : Amount of shares minted","Zaps a given amount of tokens to mint WAR and deposit it"]},{"l":"zapMultiple","p":["address","Address to stake for","address[]","amounts","Amounts to deposit for each token","Description","List of token addresses to deposit","Name","none","Parameters","receiver","Returns","Type","uint256","uint256 : Amount of shares minted","uint256[]","vlTokens","Zaps given amounts of tokens to mint WAR and deposit it"]},{"l":"Events"},{"l":"ZapHappened","p":["Event emitted when a zap happens"]}]]